library(biomaRt)
library(ABAData)
data("dataset_5_stages")
#unique(dataset_5_stages$structure) #Checking structures
#Selecting genes ID and structures present in dataset
id <- unique(dataset_5_stages$ensembl_gene_id)
st <- unique(dataset_5_stages$structure)
st_allen <- paste("Allen",st, sep=":")
#Expression data for all structures and genes
ab <- get_expression(structure_ids=st_allen, gene_ids = id, dataset='5_stages')
library(ABAEnrichment)
#Expression data for all structures and genes
ab <- get_expression(structure_ids=st_allen, gene_ids = id, dataset='5_stages')
list1 = vector(mode="list")
for (r in 1:length(ab)){
ab[[r]] <- t(ab[[r]]) #transpose
list1 <- get_name(colnames(ab[[r]])) #change Allen:XXXX to e.g. M1C_primary motor cortex, etc
colnames(ab[[r]]) <- list1
ab[[r]] <- as.data.frame(ab[[r]])
}
ab[1][1]
head(ab[1][1],10)
colnames(ab[[1]])
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol"),values=rownames(ab[[i]][[h]]),mart=ensembl)
ab[[i]][[h]]['gene_name'] <-  G_list$hgnc_symbol[match(rownames(ab[[i]][[h]]), G_list$ensembl_gene_id)]
ab[[i]][[h]] <-ab[[i]][[h]][order(ab[[i]][[h]][[1]], decreasing = TRUE), ]
}
}
#Genes within Desert region coordinates
##Using hg19 genome
ensembl <- useMart(biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = 'hsapiens_gene_ensembl',
host = 'https://grch37.ensembl.org')
#Total number of protein coding genes in Ensembl
resP=getBM(attributes = c("hgnc_symbol","gene_biotype"),
filters = "biotype",
values = list(biotype="protein_coding"), mart = ensembl)
length(resP$hgnc_symbol)
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol"),values=rownames(ab[[i]][[h]]),mart=ensembl)
ab[[i]][[h]]['gene_name'] <-  G_list$hgnc_symbol[match(rownames(ab[[i]][[h]]), G_list$ensembl_gene_id)]
ab[[i]][[h]] <-ab[[i]][[h]][order(ab[[i]][[h]][[1]], decreasing = TRUE), ]
}
}
rownames(ab[[1]][[2]])
ab1 = vector(mode="list", length = length(ab))
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
ab1[[i]][[h]] <- ab[[i]][h]
}
}
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol"),values=rownames(ab1[[i]][[h]]),mart=ensembl)
ab1[[i]][[h]]['gene_name'] <-  G_list$hgnc_symbol[match(rownames(ab1[[i]][[h]]), G_list$ensembl_gene_id)]
ab1[[i]][[h]] <-ab1[[i]][[h]][order(ab1[[i]][[h]][[1]], decreasing = TRUE), ]
}
}
ab1[[1]][[@]]
ab1[[1]][[2]]
test <- ab1[[1]][[2]]
rownames(test)
rownames(test) <- test$gene_name
test
library(dplyr)
filter(test <= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95))
str(test)
test <- as.data.frame(ab1[[1]][[2]])
test
head(test,2)
str(test)
filter(test <= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95))
test$`DFC_dorsolateral prefrontal cortex` <= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95)
test[test$`DFC_dorsolateral prefrontal cortex` >= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.75),]
nrow(test[test$`DFC_dorsolateral prefrontal cortex` >= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.75),])
nrow(test)
test
test[test$`DFC_dorsolateral prefrontal cortex` >= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95),]
ab2 <- ab1
ab2[[1]][[2]]
names(ab2[[1]][[2]])
test[test$`DFC_dorsolateral prefrontal cortex` >= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95),]$`DFC_dorsolateral prefrontal cortex`
test[test$`DFC_dorsolateral prefrontal cortex` >= quantile(test$`DFC_dorsolateral prefrontal cortex`, 0.95),]$`DFC_dorsolateral prefrontal cortex`
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:length(names(ab2[[i]]))){
ab2[[i]][[h]] <-  ab2[[i]][[h]][!(is.na(ab2[[i]][[h]][[2]]) | ab2[[i]][[h]][[2]]==""), ]
ab2[[i]][[h]][1] <- ab2[[i]][[h]][ab2[[i]][[h]][1] >= quantile(ab2[[i]][[h]][1], 0.95),][1]
}
}
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:length(names(ab2[[i]]))){
ab2[[i]][[h]][1] <- ab2[[i]][[h]][ab2[[i]][[h]][1] >= quantile(ab2[[i]][[h]][1], 0.95),][1]
}
}
ab2[[1]][[2]]
ab2[[1]][[2]][1]
ab2[[i]][[h]][1] >= quantile(ab2[[i]][[h]][1], 0.95)
ab2[[i]][[h]] >= quantile(ab2[[i]][[h]][1], 0.95)
ab2[[1]][[2]][|]
head(ab2[[1]][[2]][1]
)
head(ab2[[1]][[2]][1],2)
ab2[[1]][[2]][1] >= quantile(ab2[[i]][[h]][1], 0.95)
ab2[[1]][[2]][ab2[[1]][[2]][1] >= quantile(ab2[[i]][[h]][1], 0.95)]
ab2[[1]][[2]][ab2[[1]][[2]][1] >= quantile(ab2[[i]][[h]][1], 0.95)][1]
ab2[[1]][[2]][ab2[[1]][[2]][1] >=3]
ab2[[1]][[2]][ab2[[1]][[2]][1] >=1000]
ab2[[1]][[2]][ab2[[1]][[2]][1] >=1000][1]
ab2[[1]][[2]][ab2[[1]][[2]][1] >= 1000]
ab2[[1]][[2]][[1]]
ab2[[1]][[2]][[1]] >= 3
ab2[[1]][[2]][[1]] >= 1000
ab2[[1]][[2]][ab2[[1]][[2]][[1]] >= 1000]
ab2[[1]][[2]][[1]][ab2[[1]][[2]][[1]] >= 1000]
ab2[[1]][[2]][ab2[[1]][[2]][[1]] >= 1000,]
ab2[[1]][[2]][ab2[[1]][[2]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
ab2[[1]][[2]][ab2[[1]][[2]][[1]] >= 1000,][1]
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:length(names(ab2[[i]]))){
ab2[[i]][[h]][1] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),][1]
}
}
ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:length(names(ab2[[i]]))){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
1:length(ab2)
1:length(names(ab2[[i]]))
ab2 <- ab1
1:length(names(ab2[[i]]))
1:length(colnames(ab2[[i]]))
ab2[[1]]
names(ab2[[1]])
colnames(ab2[[1]])
str(ab2[[1]])
ncol(ab2[[1]])
1:16
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:16))){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:16))){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:16){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
ab2
ab2[[1]][[2]]
colnames(ab2[[1]][[2]])
colnames(ab2[[2]][[2]])
colnames(ab2[[3]][[2]])
1:length(ab2[[1]][[2]])
1:length(ab2[[1]][[2]][1])
1:length(ab2[[1]][[2]][2])
ab2[[1]][[2]][2]
ab2[[1]][[2]][1]
nrow(ab2[[1]][[2]][1])
1:nrow(ab2[[1]][[2]][1])
for (i in 1:length(ab2)){
for (j in 1:nrow(ab2[[i]][[2]][1])){
pfc_genesq95[j] <- ab2[[i]][[2]][1]
}
}
pfc_genesq95 = c()
for (i in 1:length(ab2)){
for (j in 1:nrow(ab2[[i]][[2]][1])){
pfc_genesq95[j] <- ab2[[i]][[2]][1]
}
}
pfc_genesq95 = c()
pfc_genesq95 = c()
for (i in 1:length(ab2)){
for (j in 1:nrow(ab2[[i]][[2]][1])){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][1])
}
}
pfc_genesq95
pfc_genesq95 = c()
for (i in 1:length(ab2)){
for (j in 1:nrow(ab2[[i]][[2]][1])){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][2])
}
}
pfc_genesq95 <- pfc_genesq95 %>% distinct()
library(dplyr)
pfc_genesq95 <- pfc_genesq95 %>% distinct()
length(pfc_genesq95)
pfc_genesq95 = c()
for (i in 1:length(ab2)){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][2])
}
pfc_genesq95 <- unlist(pfc_genesq95, recursive = FALSE)
pfc_genesq95 <- pfc_genesq95 %>% distinct()
pfc_genesq95 <- as.vector(pfc_genesq95)
pfc_genesq95 <- pfc_genesq95 %>% distinct()
str(pfc_genesq95)
pfc_genesq95 <- c(pfc_genesq95)
pfc_genesq95
pfc_genesq95 <- pfc_genesq95 %>% distinct()
pfc_genesq95_df <- as.dataframe(pfc_genesq95)
pfc_genesq95_df <- as.data.frame(pfc_genesq95)
pfc_genesq95_df
head(pfc_genesq95_df,2)
colnames(ab2[[i]][[2]])
colnames(ab2[[i]])
names(ab2[[i]])
names(ab2)
names(ab2[[1]])
names(ab2[1])
colnames(ab2[1])
ab2[|]
ab2[1]
names(ab[[1]])
names(ab1[[1]][[10]])
v1_genesq95 = c()
for (i in 1:length(ab2)){
v1_genesq95 <- c(v1_genesq95, ab2[[i]][[10]][2])
}
v1_genesq95 <- unlist(v1_genesq95, recursive = FALSE)
v1_genesq95
head(v1_genesq95)
as.data.frame(v1_genesq95)
as.data.frame(v1_genesq95)[1]
pfc_genesq95_df$v1_genesq95 <- as.data.frame(v1_genesq95)[1]
head(pfc_genesq95_df)
tail(pfc_genesq95_df)
ab2 <- ab1
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:16){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
pfc_genesq95 = c()
for (i in 1:length(ab2)){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][2])
}
pfc_genesq95 <- unlist(pfc_genesq95, recursive = FALSE)
subsetq95_genesq95_df <- as.data.frame(pfc_genesq95)
v1_genesq95 = c()
for (i in 1:length(ab2)){
v1_genesq95 <- c(v1_genesq95, ab2[[i]][[10]][2])
}
v1_genesq95 <- unlist(v1_genesq95, recursive = FALSE)
subsetq95_genesq95_df$v1_genesq95 <- as.data.frame(v1_genesq95)[1]
subsetq95_genesq95_df
library(readxl)
library(factoextra)
raw.counts <- read.table("~/Desktop/quick_exploration/pollen2019/GSE124299_PrimaryOrganoidAndPublishedCPM.txt.gz")
write.csv(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv")
ab1 = vector(mode="list", length = length(ab))
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
ab1[[i]][[h]] <- ab[[i]][h]
}
}
for (i in 1:length(ab)){
for (h in 1:length(names(ab[[i]]))){
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol"),values=rownames(ab1[[i]][[h]]),mart=ensembl)
ab1[[i]][[h]]['gene_name'] <-  G_list$hgnc_symbol[match(rownames(ab1[[i]][[h]]), G_list$ensembl_gene_id)]
ab1[[i]][[h]] <-ab1[[i]][[h]][order(ab1[[i]][[h]][[1]], decreasing = TRUE), ]
}
}
test <- as.data.frame(ab1[[1]][[2]])
ab2 <- ab1
for (i in 1:length(ab2)){ #(h in 1:length(names(ab[[i]]))) to generate same number of dataframes (in this case 16) as original in ab
for (h in 1:16){
ab2[[i]][[h]] <- ab2[[i]][[h]][ab2[[i]][[h]][[1]] >= quantile(ab2[[i]][[h]][[1]], 0.95),]
}
}
pfc_genesq95 = c()
for (i in 1:length(ab2)){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][2])
}
pfc_genesq95 <- unlist(pfc_genesq95, recursive = FALSE)
subsetq95_genesq95_df <- as.data.frame(pfc_genesq95)
v1_genesq95 = c()
for (i in 1:length(ab2)){
v1_genesq95 <- c(v1_genesq95, ab2[[i]][[10]][2])
}
v1_genesq95 <- unlist(v1_genesq95, recursive = FALSE)
subsetq95_genesq95_df$v1_genesq95 <- as.data.frame(v1_genesq95)[1]
subsetq95_genesq95_df
head(subsetq95_genesq95_df,2)
write.csv(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep = "\t")
write.csv(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv")
?write.csv
meta <- read_xlsx("./GSE124299_metadata_on_processed_samples.xlsx", sep=",", row.names = FALSE, col.names = TRUE)
write.csv(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep=",", row.names = FALSE, col.names = TRUE)
write.table(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep=",", row.names = FALSE, col.names = TRUE)
str(subsetq95_genesq95_df)
names(subsetq95_genesq95_df)
rownames(subsetq95_genesq95_df)
write.table(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep="\t", row.names = FALSE, col.names = TRUE)
head(subsetq95_genesq95_df,4)
subsetq95_genesq95_df <- as.data.frame(subsetq95_genesq95_df)
subsetq95_genesq95_df
head(subsetq95_genesq95_df,4)
subsetq95_genesq95_df <- as_tibble(subsetq95_genesq95_df)
subsetq95_genesq95_df
write.table(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep="\t", row.names = FALSE, col.names = TRUE)
write.table(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep="\t", row.names = FALSE, col.names = TRUE)
v1_genesq95
v1_genesq95 <- as.data.frame(v1_genesq95)
v1_genesq95
subsetq95_genesq95_df$v1_genesq95 <- v1_genesq95$v1_genesq95
pfc_genesq95 = c()
for (i in 1:length(ab2)){
pfc_genesq95 <- c(pfc_genesq95, ab2[[i]][[2]][2])
}
pfc_genesq95 <- unlist(pfc_genesq95, recursive = FALSE)
subsetq95_genesq95_df <- as.data.frame(pfc_genesq95)
v1_genesq95 = c()
for (i in 1:length(ab2)){
v1_genesq95 <- c(v1_genesq95, ab2[[i]][[10]][2])
}
v1_genesq95 <- unlist(v1_genesq95, recursive = FALSE)
v1_genesq95 <- as.data.frame(v1_genesq95)
subsetq95_genesq95_df$v1_genesq95 <- v1_genesq95$v1_genesq95
subsetq95_genesq95_df
#subsetq95_genesq95_df <- as_tibble(subsetq95_genesq95_df)
write.table(subsetq95_genesq95_df, file="~/Desktop/quick_exploration/PFC_V1_markes_from_ABA.csv", sep="\t", row.names = FALSE, col.names = TRUE)
subsetq95_genesq95_df
cbind(subsetq95_genesq95_df$pfc_genesq95,subsetq95_genesq95_df$v1_genesq95)
df <- cbind(subsetq95_genesq95_df$pfc_genesq95,subsetq95_genesq95_df$v1_genesq95)
df
df <- rbind(subsetq95_genesq95_df$pfc_genesq95,subsetq95_genesq95_df$v1_genesq95)
raw.counts <- read.table("~/Desktop/quick_exploration/pollen2019/GSE124299_PrimaryOrganoidAndPublishedCPM.txt.gz")
df
head(df,2)
df <- c(subsetq95_genesq95_df$pfc_genesq95,subsetq95_genesq95_df$v1_genesq95)
df
str(df)
unique(df)
length(unique(df))
ensembl <- useMart(biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = 'hsapiens_gene_ensembl',
host = 'https://grch37.ensembl.org')
#Total number of protein coding genes in Ensembl
resP=getBM(attributes = c("hgnc_symbol","gene_biotype"),
filters = "biotype",
values = list(biotype="protein_coding"), mart = ensembl)
head(resP)
write.table(resP, file="~/Desktop/quick_exploration/ALLGENES_markes_from_ABA.tsv", sep="\t", row.names = FALSE, col.names = TRUE)
